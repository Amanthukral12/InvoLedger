// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                       Int           @id @default(autoincrement())
  googleId                 String        @unique
  email                    String        @unique
  name                     String
  avatar                   String?
  GST                      String?
  Address                  String?
  PhoneNumber              String?
  state                    String?
  companyOwnerSignnature   String?
  companyBankName          String?
  companyBankAccountNumber String?
  companyBankIFSC          String?
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  sessions                 Session[]
  clients                  Client[]
  invoices                 Invoice[]
  shipToParty              ShipToParty[]
}

model Session {
  id           String   @id @default(uuid())
  sessionId    String   @unique
  companyId    Int
  refreshToken String   @unique
  deviceInfo   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  expiresAt    DateTime
  lastUsedAt   DateTime @default(now())
  company      Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Client {
  id          String    @id @default(uuid())
  name        String
  address     String
  GSTIN       String    @unique
  email       String?
  phonenumber String?
  companyId   Int
  state       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  invoices    Invoice[]

  @@unique([companyId, GSTIN])
}

model Invoice {
  id                 String       @id @default(uuid())
  invoiceNumber      String
  invoiceDate        DateTime     @default(now())
  companyId          Int
  clientId           String
  shipToPartyId      String?
  shipToParty        ShipToParty? @relation(fields: [shipToPartyId], references: [id], onDelete: SetNull)
  amount             Float
  cartage            Float?
  subTotal           Float
  sgst               Float?
  cgst               Float?
  igst               Float?
  totalAmount        Float
  totalAmountInWords String
  reverseCharge      Boolean      @default(false)
  transportMode      String
  vehicleNumber      String
  placeOfSupply      String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  client       Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  invoiceItems InvoiceItem[]

  @@unique([companyId, invoiceNumber])
}

model InvoiceItem {
  id          String   @id @default(uuid())
  invoiceId   String
  description String
  quantity    Int
  unitPrice   Float
  hsnCode     String
  amount      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model PgSession {
  sid    String   @id
  sess   Json
  expire DateTime
}

model ShipToParty {
  id        String    @id @default(uuid())
  companyId Int
  name      String
  address   String
  GSTIN     String    @unique
  state     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Invoice   Invoice[]

  @@unique([GSTIN, companyId])
}
